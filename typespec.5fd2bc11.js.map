{"mappings":"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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/typespec/typespec.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire9686\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"KwNg4\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $08bdbc187bc1707a$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $08bdbc187bc1707a$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/typespec/typespec.ts\nvar $08bdbc187bc1707a$var$bounded = (text)=>`\\\\b${text}\\\\b`;\nvar $08bdbc187bc1707a$var$notBefore = (regex)=>`(?!${regex})`;\nvar $08bdbc187bc1707a$var$identifierStart = \"[_a-zA-Z]\";\nvar $08bdbc187bc1707a$var$identifierContinue = \"[_a-zA-Z0-9]\";\nvar $08bdbc187bc1707a$var$identifier = $08bdbc187bc1707a$var$bounded(`${$08bdbc187bc1707a$var$identifierStart}${$08bdbc187bc1707a$var$identifierContinue}*`);\nvar $08bdbc187bc1707a$var$directive = $08bdbc187bc1707a$var$bounded(`[_a-zA-Z-0-9]+`);\nvar $08bdbc187bc1707a$var$keywords = [\n    \"import\",\n    \"model\",\n    \"scalar\",\n    \"namespace\",\n    \"op\",\n    \"interface\",\n    \"union\",\n    \"using\",\n    \"is\",\n    \"extends\",\n    \"enum\",\n    \"alias\",\n    \"return\",\n    \"void\",\n    \"if\",\n    \"else\",\n    \"projection\",\n    \"dec\",\n    \"extern\",\n    \"fn\"\n];\nvar $08bdbc187bc1707a$var$namedLiterals = [\n    \"true\",\n    \"false\",\n    \"null\",\n    \"unknown\",\n    \"never\"\n];\nvar $08bdbc187bc1707a$var$nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar $08bdbc187bc1707a$var$numericLiteral = `[0-9]+`;\nvar $08bdbc187bc1707a$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"/**\",\n            close: \" */\",\n            notIn: [\n                \"string\"\n            ]\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        }\n    ],\n    indentationRules: {\n        decreaseIndentPattern: new RegExp(\"^((?!.*?/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\"),\n        increaseIndentPattern: new RegExp(\"^((?!//).)*(\\\\{([^}\\\"'`/]*|(\\\\t|[ ])*//.*)|\\\\([^)\\\"'`/]*|\\\\[[^\\\\]\\\"'`/]*)$\"),\n        // e.g.  * ...| or */| or *-----*/|\n        unIndentedLinePattern: new RegExp(\"^(\\\\t|[ ])*[ ]\\\\*[^/]*\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*([ ]([^\\\\*]|\\\\*(?!/))*)?$\")\n    }\n};\nvar $08bdbc187bc1707a$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: \".tsp\",\n    brackets: [\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.square\"\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        }\n    ],\n    symbols: /[=:;<>]+/,\n    keywords: $08bdbc187bc1707a$var$keywords,\n    namedLiterals: $08bdbc187bc1707a$var$namedLiterals,\n    escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|\"|\\\\\\${)`,\n    tokenizer: {\n        root: [\n            {\n                include: \"@expression\"\n            },\n            {\n                include: \"@whitespace\"\n            }\n        ],\n        stringVerbatim: [\n            {\n                regex: `(|\"|\"\")[^\"]`,\n                action: {\n                    token: \"string\"\n                }\n            },\n            {\n                regex: `\"\"\"${$08bdbc187bc1707a$var$notBefore(`\"`)}`,\n                action: {\n                    token: \"string\",\n                    next: \"@pop\"\n                }\n            }\n        ],\n        stringLiteral: [\n            {\n                regex: `\\\\\\${`,\n                action: {\n                    token: \"delimiter.bracket\",\n                    next: \"@bracketCounting\"\n                }\n            },\n            {\n                regex: `[^\\\\\\\\\"$]+`,\n                action: {\n                    token: \"string\"\n                }\n            },\n            {\n                regex: \"@escapes\",\n                action: {\n                    token: \"string.escape\"\n                }\n            },\n            {\n                regex: `\\\\\\\\.`,\n                action: {\n                    token: \"string.escape.invalid\"\n                }\n            },\n            {\n                regex: `\"`,\n                action: {\n                    token: \"string\",\n                    next: \"@pop\"\n                }\n            }\n        ],\n        bracketCounting: [\n            {\n                regex: `{`,\n                action: {\n                    token: \"delimiter.bracket\",\n                    next: \"@bracketCounting\"\n                }\n            },\n            {\n                regex: `}`,\n                action: {\n                    token: \"delimiter.bracket\",\n                    next: \"@pop\"\n                }\n            },\n            {\n                include: \"@expression\"\n            }\n        ],\n        comment: [\n            {\n                regex: `[^\\\\*]+`,\n                action: {\n                    token: \"comment\"\n                }\n            },\n            {\n                regex: `\\\\*\\\\/`,\n                action: {\n                    token: \"comment\",\n                    next: \"@pop\"\n                }\n            },\n            {\n                regex: `[\\\\/*]`,\n                action: {\n                    token: \"comment\"\n                }\n            }\n        ],\n        whitespace: [\n            {\n                regex: $08bdbc187bc1707a$var$nonCommentWs\n            },\n            {\n                regex: `\\\\/\\\\*`,\n                action: {\n                    token: \"comment\",\n                    next: \"@comment\"\n                }\n            },\n            {\n                regex: `\\\\/\\\\/.*$`,\n                action: {\n                    token: \"comment\"\n                }\n            }\n        ],\n        expression: [\n            {\n                regex: `\"\"\"`,\n                action: {\n                    token: \"string\",\n                    next: \"@stringVerbatim\"\n                }\n            },\n            {\n                regex: `\"${$08bdbc187bc1707a$var$notBefore(`\"\"`)}`,\n                action: {\n                    token: \"string\",\n                    next: \"@stringLiteral\"\n                }\n            },\n            {\n                regex: $08bdbc187bc1707a$var$numericLiteral,\n                action: {\n                    token: \"number\"\n                }\n            },\n            {\n                regex: $08bdbc187bc1707a$var$identifier,\n                action: {\n                    cases: {\n                        \"@keywords\": {\n                            token: \"keyword\"\n                        },\n                        \"@namedLiterals\": {\n                            token: \"keyword\"\n                        },\n                        \"@default\": {\n                            token: \"identifier\"\n                        }\n                    }\n                }\n            },\n            {\n                regex: `@${$08bdbc187bc1707a$var$identifier}`,\n                action: {\n                    token: \"tag\"\n                }\n            },\n            {\n                regex: `#${$08bdbc187bc1707a$var$directive}`,\n                action: {\n                    token: \"directive\"\n                }\n            }\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=typespec.5fd2bc11.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/typespec/typespec.ts\nvar bounded = (text) => `\\\\b${text}\\\\b`;\nvar notBefore = (regex) => `(?!${regex})`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar directive = bounded(`[_a-zA-Z-0-9]+`);\nvar keywords = [\n  \"import\",\n  \"model\",\n  \"scalar\",\n  \"namespace\",\n  \"op\",\n  \"interface\",\n  \"union\",\n  \"using\",\n  \"is\",\n  \"extends\",\n  \"enum\",\n  \"alias\",\n  \"return\",\n  \"void\",\n  \"if\",\n  \"else\",\n  \"projection\",\n  \"dec\",\n  \"extern\",\n  \"fn\"\n];\nvar namedLiterals = [\"true\", \"false\", \"null\", \"unknown\", \"never\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"/**\", close: \" */\", notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' }\n  ],\n  indentationRules: {\n    decreaseIndentPattern: new RegExp(\"^((?!.*?/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\"),\n    increaseIndentPattern: new RegExp(\n      \"^((?!//).)*(\\\\{([^}\\\"'`/]*|(\\\\t|[ ])*//.*)|\\\\([^)\\\"'`/]*|\\\\[[^\\\\]\\\"'`/]*)$\"\n    ),\n    // e.g.  * ...| or */| or *-----*/|\n    unIndentedLinePattern: new RegExp(\n      \"^(\\\\t|[ ])*[ ]\\\\*[^/]*\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*([ ]([^\\\\*]|\\\\*(?!/))*)?$\"\n    )\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".tsp\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  symbols: /[=:;<>]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|\"|\\\\\\${)`,\n  tokenizer: {\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\n    stringVerbatim: [\n      { regex: `(|\"|\"\")[^\"]`, action: { token: \"string\" } },\n      { regex: `\"\"\"${notBefore(`\"`)}`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    stringLiteral: [\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `[^\\\\\\\\\"$]+`, action: { token: \"string\" } },\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\n      { regex: `\"`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    bracketCounting: [\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\n      { include: \"@expression\" }\n    ],\n    comment: [\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\n    ],\n    whitespace: [\n      { regex: nonCommentWs },\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\n    ],\n    expression: [\n      { regex: `\"\"\"`, action: { token: \"string\", next: \"@stringVerbatim\" } },\n      { regex: `\"${notBefore(`\"\"`)}`, action: { token: \"string\", next: \"@stringLiteral\" } },\n      { regex: numericLiteral, action: { token: \"number\" } },\n      {\n        regex: identifier,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@namedLiterals\": { token: \"keyword\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: `@${identifier}`, action: { token: \"tag\" } },\n      { regex: `#${directive}`, action: { token: \"directive\" } }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$08bdbc187bc1707a$export$c83be1687c028fc9","$08bdbc187bc1707a$export$789c912f57fe164c","$08bdbc187bc1707a$var$bounded","text","$08bdbc187bc1707a$var$notBefore","regex","$08bdbc187bc1707a$var$identifier","$08bdbc187bc1707a$var$directive","$08bdbc187bc1707a$var$nonCommentWs","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","indentationRules","decreaseIndentPattern","RegExp","increaseIndentPattern","unIndentedLinePattern","defaultToken","tokenPostfix","token","symbols","keywords","namedLiterals","escapes","tokenizer","root","include","stringVerbatim","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"version":3,"file":"typespec.5fd2bc11.js.map"}